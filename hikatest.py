import json
import aiohttp
from hikkatl.types import Message
from .. import loader, utils

@loader.tds
class BypassModule(loader.Module):
    """Bypass module
    üåü –°–æ–∑–¥–∞–Ω–æ - @aurafunny
    """
    strings = {"name": "BypassModule", "key_response": '–í–∞—à –∫–ª—é—á - "{key}"'}

    @loader.command(
        ru_doc="–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ .key <url>",
    )
    async def key(self, message: Message):
        """–ü–æ–ª—É—á–∏—Ç—å –∫–ª—é—á –∏–∑ URL"""
        args = utils.get_args(message)
        if not args:
            await utils.answer(message, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ .key <url>")
            return

        url = f"https://kobayashi-heart-attack.vercel.app/api/kobayashi?url={args[0]}&kobayashi=NoHome"
        
        async with aiohttp.ClientSession() as session:
            async with session.get(url) as response:
                if response.status == 200:
                    data = await response.text()
                    try:
                        json_data = json.loads(data)
                        key = json_data.get("key", "")
                        await utils.answer(message, self.strings("key_response").format(key=key))
                    except json.JSONDecodeError:
                        await utils.answer(message, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞.")
                else:
                    await utils.answer(message, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ —Å–∞–π—Ç—É.")

    @loader.command(
        ru_doc="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏ –æ–±–Ω–æ–≤–∏—Ç—å –º–æ–¥—É–ª—å",
    )
    async def check(self, message: Message):
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏ –æ–±–Ω–æ–≤–∏—Ç—å –º–æ–¥—É–ª—å"""
        await utils.answer(message, "–ù–∞—á–∏–Ω–∞—é –ø—Ä–æ–≤–µ—Ä–∫—É –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–æ–¥—É–ª—è...")
        url = "https://raw.githubusercontent.com/WinShop31/nextjs-boilerplate/refs/heads/main/hikatest.py"

        async with aiohttp.ClientSession() as session:
            async with session.get(url) as response:
                if response.status == 200:
                    new_code = await response.text()
                    # –ó–¥–µ—Å—å –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–æ–≤—ã–π –∫–æ–¥ –≤ —Ñ–∞–π–ª
                    with open("hikatest.py", "w") as file:
                        file.write(new_code)
                    await utils.answer(message, "–ú–æ–¥—É–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω!")
                else:
                    await utils.answer(message, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–æ–≤–æ–≥–æ –∫–æ–¥–∞.")
